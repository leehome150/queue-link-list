{"version":3,"sources":["list.js"],"names":["createList","value","createNode","data","next","appendList","list","node","x","removeFromList","p","travelList","fn","node2","node3","node4","console","log"],"mappings":"AAAA,IAAIA,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC1B,SAAOC,UAAU,CAACD,KAAD,CAAjB;AACD,CAFD;;AAGA,IAAIC,UAAU,GAAG,SAAbA,UAAa,CAACD,KAAD,EAAW;AAC1B,SAAO;AACLE,IAAAA,IAAI,EAAEF,KADD;AAELG,IAAAA,IAAI,EAAE;AAFD,GAAP;AAID,CALD;;AAMA,IAAIC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOL,KAAP,EAAiB;AAChC,MAAIM,IAAI,GAAGL,UAAU,CAACD,KAAD,CAArB;AACA,MAAIO,CAAC,GAAGF,IAAR;;AACA,MAAIE,CAAC,CAACJ,IAAN,EAAY;AACVI,IAAAA,CAAC,GAAGA,CAAC,CAACJ,IAAN;AACD;;AACDI,EAAAA,CAAC,CAACJ,IAAF,GAASG,IAAT;AACA,SAAOA,IAAP;AACD,CARD;;AAUA,IAAIE,cAAc,GAAG,SAAjBA,cAAiB,CAACH,IAAD,EAAOC,IAAP,EAAgB;AACnC,MAAIC,CAAC,GAAGF,IAAR;AACA,MAAII,CAAC,GAAGH,IAAR;;AACA,SAAOC,CAAC,KAAKE,CAAN,IAAWF,CAAC,KAAK,IAAxB,EAA8B;AAC5BE,IAAAA,CAAC,GAAGF,CAAJ;AACAA,IAAAA,CAAC,GAAGA,CAAC,CAACJ,IAAN;AACD;;AACD,MAAII,CAAC,KAAK,IAAV,EAAgB;AACd,WAAO,KAAP;AACD,GAFD,MAEO,IAAIA,CAAC,KAAKE,CAAV,EAAa;AAClBF,IAAAA,CAAC,GAAGA,CAAC,CAACJ,IAAN;AACD,GAFM,MAEA;AACLM,IAAAA,CAAC,CAACN,IAAF,GAASI,CAAC,CAACJ,IAAX;AACA,WAAOE,IAAP;AACD;AACF,CAfD;;AAiBA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACL,IAAD,EAAOM,EAAP,EAAc;AAC/B,MAAIJ,CAAC,GAAGF,IAAR;;AACA,MAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBM,IAAAA,EAAE,CAACJ,CAAD,CAAF;AACAA,IAAAA,CAAC,GAAGA,CAAC,CAACJ,IAAN;AACD;AACF,CAND;;AAQA,IAAME,IAAI,GAAGN,UAAU,CAAC,EAAD,CAAvB;AACA,IAAMa,KAAK,GAAGR,UAAU,CAACC,IAAD,EAAO,EAAP,CAAxB;AACA,IAAMQ,KAAK,GAAGT,UAAU,CAACC,IAAD,EAAO,EAAP,CAAxB;AACA,IAAMS,KAAK,GAAGV,UAAU,CAACC,IAAD,EAAO,EAAP,CAAxB;AACAU,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACAK,UAAU,CAACL,IAAD,EAAO,UAACC,IAAD,EAAU;AACzBS,EAAAA,OAAO,CAACC,GAAR,CAAYV,IAAI,CAACJ,IAAjB;AACD,CAFS,CAAV,EAGA","file":"list.77ef9d65.js","sourceRoot":"..\\src","sourcesContent":["let createList = (value) => {\r\n  return createNode(value);\r\n};\r\nlet createNode = (value) => {\r\n  return {\r\n    data: value,\r\n    next: null,\r\n  };\r\n};\r\nlet appendList = (list, value) => {\r\n  let node = createNode(value);\r\n  let x = list;\r\n  if (x.next) {\r\n    x = x.next;\r\n  }\r\n  x.next = node;\r\n  return node;\r\n};\r\n\r\nlet removeFromList = (list, node) => {\r\n  let x = list;\r\n  let p = node;\r\n  while (x !== p && x !== null) {\r\n    p = x;\r\n    x = x.next;\r\n  }\r\n  if (x === null) {\r\n    return false;\r\n  } else if (x === p) {\r\n    x = x.next;\r\n  } else {\r\n    p.next = x.next;\r\n    return list;\r\n  }\r\n};\r\n\r\nconst travelList = (list, fn) => {\r\n  let x = list;\r\n  if (list !== null) {\r\n    fn(x);\r\n    x = x.next;\r\n  }\r\n};\r\n\r\nconst list = createList(10);\r\nconst node2 = appendList(list, 20);\r\nconst node3 = appendList(list, 30);\r\nconst node4 = appendList(list, 40);\r\nconsole.log(list);\r\ntravelList(list, (node) => {\r\n  console.log(node.data);\r\n});\r\n// removeFromList(list, 30);\r\n"]}